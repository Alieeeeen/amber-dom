{"version":3,"file":"amberdom.js","sources":["../src/util.js","../src/vnode/index.js","../src/h/index.js","../src/diff/patch-type.js","../src/diff/list-diff.js","../src/diff/index.js","../src/patch/index.js","../src/index.js"],"sourcesContent":["export function isArray (obj) {\n  return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nexport function isEmpty(obj) {\n  return Object.keys(obj|| {}).length === 0;\n}\n","import h from '../h/index';\nimport { isArray } from '../util';\nexport default VNode;\n\nconst eventHookRe = /^ev\\-([a-z]+)/;\n\nclass VNode {\n  /**\n   * @param {String} tagName a tag name. Must be specified.\n   * @param {Object} props can be an empty object.\n   * @param {Array} children can be an empty array.\n   */\n  constructor(tagName, props, children) {\n    this.tagName = tagName;\n    this.props = props;\n    this.children = children;\n    this.key = props.key || void 0;\n    this.count = children.reduce((acc, child) => {\n      if (child instanceof VNode)\n        return child.count + acc + 1;\n      else\n        return acc + 1;\n    }, 0);\n    this.cleanups = []; // for cleaning up event listeners.\n\n    delete props.key; // no key will be needed anymore.\n  }\n\n  /**\n   * \n   */\n  render() {\n    const element = !(/(SVG|svg)/.test(this.tagName))\n      ? document.createElement(this.tagName)\n      : document.createElementNS(\n        \"http://www.w3.org/2000/svg\",\n        \"svg\"\n      );\n\n    const props = this.props;\n    const self = this;\n\n    for (const propName in props) {\n      if (props.hasOwnProperty(propName)) {\n        const _events = propName.match(eventHookRe);\n        if (_events) {\n          try {\n            const handler = typeof props[propName] === 'function'\n              ? props[propName]\n              : new Function(`(${props[propName]})(...arguments);`);\n            \n            // store it for later detachment, to avoid memory\n            // leaking.\n            this.cleanups.push({\n              evName: _events[1],\n              handler: handler\n            });\n\n            element.addEventListener(_events[1], handler);\n          } catch(e) {\n            console.log(\n              `Warning: listener for event '${_event[1]}' isn't working.\n              If you're specifying this handler in string, please specify a function.`);\n          }\n        }\n        \n        else if (propName === 'className') {\n          element.setAttribute('class', props[propName])\n        }\n\n        else {\n          element.setAttribute(propName, props[propName]);\n        }\n      }\n    }\n\n    this.children.forEach(child => {\n      var childElement;\n\n      if (typeof child === 'string') {\n        \n        childElement = document.createTextNode(child);  \n      }\n      // It is a VNode.\n      else if (child instanceof VNode) {\n        childElement = child.render();\n      }\n      // It is a custom-defined node.\n      else {\n        var _render = child.render || void 0;\n\n        // It is defined as a class.\n        if (typeof _render === 'function') {\n          _render.bind(child);\n          childElement = _render()\n        }\n        // defined as a function.\n        else {\n          childElement = child.render();\n        }\n      }\n      element.appendChild(childElement);\n    });\n\n    this.$el = element;\n    return element;\n  }\n\n  detachEventListeners() {\n    this.cleanups.forEach(event => {\n      this.$el.removeEventListener(event.evName, event.handler);\n    });\n  }\n}","import VNode from '../vnode/index';\nimport { isArray } from '../util';\nexport default h;\n\n\nconst classIdSpliter = /([\\.#]?[^\\s#.]+)/;\nconst spaceStriper = /^\\s*|\\s*$/;\nconst propSpliter = /\\s*=\\s*/;\n\nfunction parseTagName(tagName) {\n  const parts = tagName.split(classIdSpliter);\n  const result = {};\n\n  parts.forEach(part => {\n    if (part === '')  return;\n\n    if (!result.tagName) {\n      result.tagName = part;\n    } else if (part[0] === '.') {\n      (result.className || (result.className = [])).push(part.substr(1));\n    } else if (part[0] === '#') {\n      result.id = part.substr(1);\n    }\n  });\n\n  result.className && result.className.join(' ');\n  return result;\n}\n\n/**\n * \n * @param {String|Function} tagName a built-in tag name or custom function that returns an object created by h.\n * @param {Object} props optional. any style, event listeners, and className should be put here.\n * @param {*} children optional children. Any string, instance of VNode will be children.\n */\nfunction h(tagName, props, ...children) {\n  var tagInfo, vnode;\n\n  (props || (props = {}));\n  (children || (children = []));\n\n  // handle children re-maps.\n  if ((props instanceof VNode) ||\n      (typeof props === 'string')\n    ) {\n    children.unshift(props);\n    props = {};\n  }\n  \n  // handle children re-maps.\n  if (isArray(props)) {\n    children = [...props, children];\n    props = {};\n  }\n\n  // handle object-literal `style`.\n  if (props.style && typeof props.style === 'object') {\n    let style = '';\n\n    for (const key in props.style) {\n      style += `${key}: ${props.style[key]}; `;\n    }\n    props.style = style;\n  }\n\n  // handle array-literal `className`.\n  if (props.className && isArray(props.className)) {\n    props.className = props.className.join(' ');\n  }\n\n  if (typeof tagName === 'string') {\n    tagInfo = parseTagName(tagName);\n    if (tagInfo.className) {\n      (props.className || (props.className = ''));\n      props.className += ' ' + tagInfo.className;\n    }\n    // any children will be handled by VNode, remember there's no\n    // VText.\n    return new VNode(tagInfo.tagName, props, children);\n  } else if (typeof tagName === 'function') {\n    // use `new` in case it is a class.\n    return new tagName(props, children);\n  }\n}","const REPLACE = 'REPLACE';\nconst REORDER = 'REORDER';\nconst PROPS = 'FIXPROPS';\nconst TEXT = 'TEXT';\n\nconst patchType = {\n  REPLACE,\n  REORDER,\n  PROPS,\n  TEXT\n};\n\nexport default patchType;\n","import patchType from './patch-type';\nexport default diff;\n\n\nconst { REPLACE, REORDER, TEXT, PROPS } = patchType;\nfunction diff(oldList, newList, key) {\n  const oldListKeys = getKeys(oldList, key);\n  const newListKeys = getKeys(newList, key);\n  const oldListLength = oldList.length;\n  const newListLength = newList.length;\n  const diffed = oldList.slice();\n  const moves = [];\n\n  // Not a key was provied, don't diff.\n  if (noKeys(oldListKeys) && noKeys(newListKeys))\n    return {\n      diffed,\n      moves\n    };\n  // record the move of the last element.\n  let indexDeltas = new Array(oldListLength).fill(0);\n  let _physicalIndex;\n\n  newListKeys.forEach((key, newIndex) => {\n    let _physicalIndex = oldListKeys.indexOf(key);\n\n    if (_physicalIndex === -1) {\n      // Element doesn't exist in `newList` yet. Tell it to\n      // insert it.\n      moves.push({\n        type: 'INSERT',\n        index: newIndex,\n        item: newList[newIndex]\n      });\n      diffed.splice(newIndex, 0, newList[newIndex]);\n\n      // positions of all unprocessed elements should take this delta.\n      indexDeltas[oldListLength - 1]++;\n    } else {\n      let oldIndex = _physicalIndex;\n\n      for (let i = oldListLength - 1; i >= _physicalIndex; i--) {\n        oldIndex += indexDeltas[i];\n      }\n\n      // If it is already in place, don't do anything.\n      if (newIndex === oldIndex)  return;\n\n      moves.push({\n        type: 'MOVE',\n        from: oldIndex, \n        to: newIndex\n      });\n      let _elem = diffed.splice(oldIndex, 1)[0];\n      diffed.splice(newIndex, 0, _elem)\n\n      // It is impossible to move element from front to back.\n      indexDeltas[_physicalIndex]++;\n    }\n  });\n\n  // remove extra.\n  oldListKeys.forEach((key, i) => {\n    \n    if (newListKeys.indexOf(key) === -1) {\n      moves.push({\n        type: 'REMOVE',\n        index: newListLength  // all extra items must've been moved to end.\n      });\n      diffed.splice(newListLength, 1);\n    }\n  });\n\n  return {\n    diffed,\n    moves\n  };\n}\n\n// Elements with no `key` field is to be removed.\nfunction getKeys(list, key) {\n  return list.map((item, i) => {\n    if (key && item) {\n      return typeof key === 'function'\n        ? key(item)\n        : item[key];\n    } else  return void 0;\n  });\n}\n\n\nfunction noKeys(list) {\n  for (const item of list)\n    if (item !== void 0)\n      return false;\n\n  return true;\n}","import listDiff from './list-diff';\nimport { isEmpty } from '../util';\nimport patchType from './patch-type';\n\n\nconst { REPLACE, REORDER, TEXT, PROPS } = patchType;\n\nexport function diff (oldTree, newTree) {\n  const patches = {};\n  walk(oldTree, newTree, patches, 0);\n  return patches;\n}\n\nfunction walk(oldNode, newNode, patches, index) {\n  var currPatches = [];\n  var propPatches, childrenPatches;\n\n  // both Text node.\n  if (typeof oldNode === 'string' && typeof newNode === 'string') {\n\n    if (oldNode === newNode) {\n      // nothing to patch.\n    } else {\n      patches[index] = { type: TEXT, text: newNode };\n    }\n    // there would be no props nor children.\n    return;\n  }\n\n  propPatches = diffProps(oldNode, newNode);\n  // the whole node should be replaced.\n  if (oldNode.tagName !== newNode.tagName ||\n      oldNode.key !== newNode.key) {  // actually, their keys must be equal.\n    \n      currPatches.push({\n      type: REPLACE,\n      node: newNode\n    });\n  }\n  // only patch some props.\n  else if (!isEmpty(propPatches)) {\n    currPatches.push({\n      type: PROPS,\n      content: propPatches\n    });\n  }\n\n  diffChildren(\n    oldNode,\n    newNode,\n    patches,\n    currPatches,\n    index\n  );\n  if (currPatches.length) {\n    patches[index] = currPatches;\n  }\n  return patches;\n}\n\nfunction diffProps(oldProps, newProps) {\n  var propPatches = {}, value;\n\n  // className might be changed partially.\n  propPatches.classPatches = \n    diffClassNames(oldProps.className, newProps.className);\n\n  for (const propName in newProps) {\n    if (newProps.hasOwnProperty(propName)) {\n      if (propName === 'className') continue; // already done.\n      value = newProps[propName];\n      if (oldProps[propName] !== value) {\n        propPatches[propName] = value;\n      }\n    }\n  }\n  // remove old props.\n  for (const propName in oldProps) {\n    if (!(propName in newProps))\n      propPatches[propName] = void 0;\n  }\n}\n\nfunction diffClassNames(oldClass, newClass) {\n  var classPatches = [];\n\n  newClass.forEach((name) => {\n    if (oldClass.indexOf(name) === -1) {\n      classPatches.push({\n        type: 'ADD',\n        name: name\n      });\n    }\n  });\n\n  oldClass.forEach((name) => {\n    if (newClass.indexOf(name) === -1) {\n      classPatches.push({\n        type: 'REMOVE',\n        name: name\n      });\n    }\n  });\n  return classPatches.length !== 0\n    ? classPatches\n    : void 0;   // this is important.\n}\n\nfunction diffChildren(oldChildren, \n  newChildren, patches, currPatches, index) {\n  const diffs = listDiff(oldChildren, newChildren, 'key');\n\n  oldChildren = diffs.diffed; // Must reorder them first before steppin deeper.\n  if (diffs.moves.length) {\n    currPatches.push({\n      type: REORDER,\n      moves: moves\n    });\n  }\n\n  var prevSibling = null;\n  var currIndex = index;\n  oldChildren.forEach((child, i) => {\n    const newChild = newChildren[i];\n    currIndex = (prevSibling && prevSibling.count)\n      ? prevSibling.count + currIndex + 1\n      : currIndex + 1;  // the first child.\n    walk(child, newChildren[i], patches, currIndex);\n    prevSibling = child;\n  });\n}","export default {};","import h from './h/index';\nimport { diff } from './diff/index';\nimport patch from './patch/index';\nimport VNode from './vnode/index';\n\nexport default {\n  h,\n  diff,\n  patch,\n  VNode\n};"],"names":["isArray","obj","Object","prototype","toString","call","isEmpty","keys","length","eventHookRe","VNode","tagName","props","children","key","count","reduce","acc","child","cleanups","element","test","document","createElement","createElementNS","propName","hasOwnProperty","_events","match","handler","Function","push","evName","addEventListener","e","console","log","_event","setAttribute","forEach","childElement","createTextNode","render","_render","bind","appendChild","$el","removeEventListener","event","classIdSpliter","parseTagName","parts","split","result","part","className","substr","id","join","h","tagInfo","unshift","style","REPLACE","REORDER","PROPS","TEXT","patchType","diff","oldList","newList","oldListKeys","getKeys","newListKeys","oldListLength","newListLength","diffed","slice","moves","noKeys","indexDeltas","Array","fill","newIndex","_physicalIndex","indexOf","type","index","item","splice","oldIndex","i","from","to","_elem","list","map","oldTree","newTree","patches","walk","oldNode","newNode","currPatches","propPatches","text","diffProps","node","content","diffChildren","oldProps","newProps","value","classPatches","diffClassNames","oldClass","newClass","name","oldChildren","newChildren","diffs","listDiff","prevSibling","currIndex","newChild","patch"],"mappings":"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"}