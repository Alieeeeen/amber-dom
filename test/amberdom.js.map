{"version":3,"file":"amberdom.js","sources":["../src/util.js","../src/vnode/index.js","../src/h/index.js","../src/diff/patch-type.js","../src/diff/list-diff.js","../src/diff/index.js","../src/patch/index.js","../src/index.js"],"sourcesContent":["export function isArray (obj) {\n  return Object.prototype.toString.call(obj) === '[object Array]';\n}\n\nexport function isEmpty(obj) {\n  return Object.keys(obj|| {}).length === 0;\n}\n","import h from '../h/index';\nimport { isArray } from '../util';\nexport default VNode;\n\nconst eventHookRe = /^ev\\-([a-z]+)/;\n\nclass VNode {\n  /**\n   * @param {String} tagName a tag name. Must be specified.\n   * @param {Object} props can be an empty object.\n   * @param {Array} children can be an empty array.\n   */\n  constructor(tagName, props, children) {\n    this.tagName = tagName;\n    this.props = props;\n    this.children = children;\n    this.key = props.key || void 0;\n    this.count = children.reduce((acc, child) => {\n      if (child instanceof VNode)\n        return child.count + acc + 1;\n      else\n        return acc + 1;\n    }, 0);\n    this.cleanups = []; // for cleaning up event listeners.\n\n    delete props.key; // no key will be needed anymore.\n  }\n\n  /**\n   * render a real DOM tree for this VTree rooted at this VNode.\n   */\n  render() {\n    const element = !(/(SVG|svg)/.test(this.tagName))\n      ? document.createElement(this.tagName)\n      : document.createElementNS(\n        \"http://www.w3.org/2000/svg\",\n        \"svg\"\n      );\n\n    const props = this.props;\n    const self = this;\n\n    for (const propName in props) {\n      if (props.hasOwnProperty(propName)) {\n        const _events = propName.match(eventHookRe);\n        if (_events) {\n          // FIXME: might be a better way of handling this.\n          try {\n            const handler = typeof props[propName] === 'function'\n              ? props[propName]\n              : new Function(`(${props[propName]})(...arguments);`);\n            \n            // store it for later detachment, to avoid memory\n            // leaking.\n            this.cleanups.push({\n              evName: _events[1],\n              handler: handler\n            });\n            // avoid bubbling.\n            element.addEventListener(_events[1], handler, false);\n          } catch(e) {\n            console.log(\n              `Warning: listener for event '${_event[1]}' isn't working.\n              If you're specifying this handler in string, please specify a function.`);\n          }\n        }\n        \n        else if (propName === 'className') {\n          element.setAttribute('class', props[propName])\n        }\n\n        else {\n          element.setAttribute(propName, props[propName]);\n        }\n      }\n    }\n\n    this.children.forEach(child => {\n      var childElement;\n\n      if (typeof child === 'string') {\n        \n        childElement = document.createTextNode(child);  \n      }\n      // It is a VNode.\n      else if (child instanceof VNode) {\n        childElement = child.render();\n      }\n      // FIXME: might be buggy.\n      // It is a custom-defined node.\n      else {\n        var _render = child.render || void 0;\n\n        // It is defined as a class.\n        if (typeof _render === 'function') {\n          _render.bind(child);\n          childElement = _render()\n        }\n        // defined as a function.\n        else {\n          childElement = child.render();\n        }\n      }\n      element.appendChild(childElement);\n    });\n\n    this.$el = element;\n    return element;\n  }\n\n  detachEventListeners() {\n    this.cleanups.forEach(event => {\n      this.$el.removeEventListener(event.evName, event.handler);\n    });\n  }\n}","import VNode from '../vnode/index';\nimport { isArray } from '../util';\nexport default h;\n\n\nconst classIdSpliter = /([\\.#]?[^\\s#.]+)/;\nconst spaceStriper = /^\\s*|\\s*$/;\nconst propSpliter = /\\s*=\\s*/;\n\nfunction parseTagName(tagName) {\n  const parts = tagName.split(classIdSpliter);\n  const result = {};\n\n  parts.forEach(part => {\n    if (part === '')  return;\n\n    if (!result.tagName) {\n      result.tagName = part;\n    } else if (part[0] === '.') {\n      (result.className || (result.className = [])).push(part.substr(1));\n    } else if (part[0] === '#') {\n      result.id = part.substr(1);\n    }\n  });\n\n  result.className && result.className.join(' ');\n  return result;\n}\n\n/**\n * \n * @param {String|Function} tagName a built-in tag name or custom function that returns an object created by h.\n * @param {Object} props optional. any style, event listeners, and className should be put here.\n * @param {*} children optional children. Any string, instance of VNode will be children.\n */\nfunction h(tagName, props, ...children) {\n  var tagInfo, vnode;\n\n  (props || (props = {}));\n  (children || (children = []));\n\n  // handle children re-maps.\n  if ((props instanceof VNode) ||\n      (typeof props === 'string')\n    ) {\n    children.unshift(props);\n    props = {};\n  }\n  \n  // handle children re-maps.\n  if (isArray(props)) {\n    children = [...props, children];\n    props = {};\n  }\n\n  // handle object-literal `style`.\n  if (props.style && typeof props.style === 'object') {\n    let style = '';\n\n    for (const key in props.style) {\n      style += `${key}: ${props.style[key]}; `;\n    }\n    props.style = style;\n  }\n\n  // handle array-literal `className`.\n  if (props.className && isArray(props.className)) {\n    props.className = props.className.join(' ');\n  }\n\n  if (typeof tagName === 'string') {\n    tagInfo = parseTagName(tagName);\n    if (tagInfo.className) {\n      (props.className || (props.className = ''));\n      props.className += ' ' + tagInfo.className;\n    }\n    // any children will be handled by VNode, remember there's no\n    // VText.\n    return new VNode(tagInfo.tagName, props, children);\n  } else if (typeof tagName === 'function') {\n    // use `new` in case it is a class.\n    return new tagName(props, children);\n  }\n}","const REPLACE = 'REPLACE';\nconst REORDER = 'REORDER';\nconst PROPS = 'PROPS';\nconst TEXT = 'TEXT';\n\nconst patchType = {\n  REPLACE,\n  REORDER,\n  PROPS,\n  TEXT\n};\n\nexport default patchType;\n","import patchType from './patch-type';\nexport default diff;\n\n\nconst { REPLACE, REORDER, TEXT, PROPS } = patchType;\nfunction diff(oldList, newList, key) {\n  const oldListKeys = getKeys(oldList, key);\n  const newListKeys = getKeys(newList, key);\n  const oldListLength = oldList.length;\n  const newListLength = newList.length;\n  let diffed = oldList.slice();\n  let moves = [];\n\n  // Not a key was provied, don't diff.\n  if (noKeys(oldListKeys) && noKeys(newListKeys)) {\n    let op, start, end, index, inserted;\n\n    if (oldListLength === newListLength) {\n      return {\n        diffed,\n        moves\n      };\n    }\n\n    // Remove accessary nodes.\n    if (oldListLength > newListLength) {\n      op = 'REMOVE';\n      start = newListLength;\n      end = oldListLength;\n      diffed.splice(newListLength, oldListLength - newListLength);\n    }\n    \n    // Insert neccessary nodes.\n    else if (newListLength > oldListLength) {\n      op = 'INSERT';\n      start = oldListLength;\n      end = newListLength;\n      inserted = newList.slice(oldListLength);\n      diffed = [...diffed, ...inserted];\n    }\n\n    for (let i = start; i < end; i++) {\n      moves.push({\n        type: op,\n        index: i,\n        item: newList[i] || null  // It doesn't matter what.\n      });\n    }\n\n    return {\n      diffed,\n      moves\n    };\n\n  }\n  // record the move of the last element.\n  let indexDeltas = new Array(oldListLength).fill(0);\n  let _physicalIndex;\n\n  newListKeys.forEach((key, newIndex) => {\n    let _physicalIndex = oldListKeys.indexOf(key);\n\n    if (_physicalIndex === -1) {\n      // Element doesn't exist in `newList` yet. Tell it to\n      // insert it.\n      moves.push({\n        type: 'INSERT',\n        index: newIndex,\n        item: newList[newIndex]\n      });\n      diffed.splice(newIndex, 0, newList[newIndex]);\n\n      // positions of all unprocessed elements should take this delta.\n      indexDeltas[oldListLength - 1]++;\n    } else {\n      let oldIndex = _physicalIndex;\n\n      for (let i = oldListLength - 1; i >= _physicalIndex; i--) {\n        oldIndex += indexDeltas[i];\n      }\n\n      // If it is already in place, don't do anything.\n      if (newIndex === oldIndex)  return;\n\n      moves.push({\n        type: 'MOVE',\n        from: oldIndex, \n        to: newIndex\n      });\n      let _elem = diffed.splice(oldIndex, 1)[0];\n      diffed.splice(newIndex, 0, _elem)\n\n      // It is impossible to move element from front to back.\n      indexDeltas[_physicalIndex]++;\n    }\n  });\n\n  // remove extra.\n  oldListKeys.forEach((key, i) => {\n    \n    if (newListKeys.indexOf(key) === -1) {\n      moves.push({\n        type: 'REMOVE',\n        index: newListLength  // all extra items must've been moved to end.\n      });\n      diffed.splice(newListLength, 1);\n    }\n  });\n\n  return {\n    diffed,\n    moves\n  };\n}\n\n// Elements with no `key` field is to be removed.\nfunction getKeys(list, key) {\n  return list.map((item, i) => {\n    if (key && item) {\n      return typeof key === 'function'\n        ? key(item)\n        : item[key];\n    } else  return void 0;\n  });\n}\n\n\nfunction noKeys(list) {\n  for (const item of list)\n    if (item !== void 0)\n      return false;\n\n  return true;\n}","import listDiff from './list-diff';\nimport { isEmpty } from '../util';\nimport patchType from './patch-type';\n\n\nconst { REPLACE, REORDER, TEXT, PROPS } = patchType;\n\nexport default function diff (oldTree, newTree) {\n  const patches = {};\n  walk(oldTree, newTree, patches, 0);\n  return patches;\n}\n\nfunction walk(oldNode, newNode, patches, index) {\n  var currPatches = [];\n  var propPatches, childrenPatches;\n\n  // TODO: let custom-defined component take control of diffing.\n\n  if (newNode === void 0) {\n    // oldNode will be removed.\n    return patches;\n  }\n\n  // both Text node.\n  else if (typeof oldNode === 'string' && typeof newNode === 'string') {\n\n    if (oldNode === newNode) {\n      // nothing to patch.\n    } else {\n      patches[index] = [{ type: TEXT, text: newNode }];\n    }\n    // there would be no props nor children.\n    return patches;\n  }\n\n  propPatches = diffProps(oldNode.props || {}, newNode.props || {});\n\n  // the whole node should be replaced, if tag names are not the same\n  // or keys diffed.splice(oldListLength, 0, ...inserted); are not the same.\n  if (oldNode.tagName !== newNode.tagName ||\n      oldNode.key !== newNode.key) {\n    \n      currPatches.push({\n        type: REPLACE,\n        node: newNode\n      });\n      patches[index] = currPatches;\n      // do not diff their children anymore.\n      return patches;\n  }\n  // only patch some props.\n  else if (!isEmpty(propPatches)) {\n    currPatches.push({\n      type: PROPS,\n      props: propPatches\n    });\n  }\n\n  diffChildren(\n    oldNode.children || [],\n    newNode.children || [],\n    patches,\n    currPatches,\n    index\n  );\n  if (currPatches.length) {\n    patches[index] = currPatches;\n  }\n  return patches;\n}\n\nfunction diffProps(oldProps, newProps) {\n  var propPatches = {}, value;\n\n  // update props.\n  for (const propName in newProps) {\n    if (newProps.hasOwnProperty(propName)) {\n      value = newProps[propName];\n      if (oldProps[propName] !== value) {\n        propPatches[propName] = value;\n      }\n    }\n  }\n  // remove old props.\n  for (const propName in oldProps) {\n    if (!(propName in newProps))\n      propPatches[propName] = void 0;\n  }\n  return propPatches;\n}\n\n\nfunction diffChildren(oldChildren, \n  newChildren, patches, currPatches, index) {\n  const diffs = listDiff(oldChildren, newChildren, 'key');\n\n  oldChildren = diffs.diffed; // Must reorder them first before steppin deeper.\n  if (diffs.moves.length) {\n    currPatches.push({\n      type: REORDER,\n      moves: diffs.moves\n    });\n  }\n\n  var prevSibling = null;\n  var currIndex = index;\n  oldChildren.forEach((child, i) => {\n    const newChild = newChildren[i];\n    currIndex = (prevSibling && prevSibling.count)\n      ? prevSibling.count + currIndex + 1\n      : currIndex + 1;  // the first child.\n    walk(child, newChildren[i], patches, currIndex);\n    prevSibling = child;\n  });\n}","import VNode from '../vnode/index';\nimport patchType from '../diff/patch-type.js';\nexport default patch;\n\n\nconst { REPLACE, REORDER, PROPS, TEXT } = patchType;\n\nfunction patch(domRoot, patches) {\n  walk(domRoot, patches, { index: 0 });\n}\n\n// walker keeps the complexity away.\n// `walk` updates the domTree buttom-up.\nfunction walk(domNode, patches, walker) {\n  const currPatches = patches[walker.index];\n\n  // changes should be applied for this node first\n  // in case one of childNodes of `domNode` is removed.\n  // Thus if patches are applied to childNodes first,\n  // and if that patched child node is later on removed,\n  // no effect will be taken into account.\n  if(currPatches) {\n    applyPatches(domNode, currPatches);\n  }\n\n  if (domNode.childNodes) {\n    const childArr = [].slice.call(domNode.childNodes);\n    childArr.forEach((child, i) => {\n      walker.index++;\n      walk(child, patches, walker);\n    });\n  }\n}\n\n/**\n * patch a single dom node.\n * @param {NodeList} domNode \n * @param {Array} patch \n */\nfunction applyPatches(domNode, patches) {\n  let props, newNode;\n\n  patches.forEach(patch => {\n    switch(patch.type) {\n    case REPLACE:\n      newNode = (patch.node instanceof VNode || patch.node.render)\n        ? patch.node.render() // an instance of VNode or a custom node.\n        : typeof patch.node === 'string'\n        ? document.createTextNode(patch.node)\n        : new Error('You might be using a custom node, if so, you need to provide a render function.');\n      if (newNode instanceof Error) {\n        throw newNode;\n      }\n      domNode.parentNode.replaceChild(newNode, domNode);\n      break;\n\n    case PROPS:\n      props = patch.props;\n      for (let propName in props) {\n        if (props[propName] === void 0)\n          domNode.removeAttribute(propName !== 'className' ? propName : 'class');\n        else\n          domNode.setAttribute(propName !== 'className' ? propName : 'class', props[propName]);\n      }\n      break;\n\n    case TEXT:\n      if (domNode.textContent) {\n        domNode.textContent = patch.text;\n      } else {\n        domNode.nodeValue = patch.text;\n      }\n      break;\n    \n    case REORDER:\n      reorderChildren(domNode, patch.moves);\n      break;\n\n    default:\n      throw new Error('Some internal error.');\n    }\n  });\n}\n\n// TODO: Add batch.\nfunction reorderChildren(domNode, moves) {\n  const childNodes = domNode.childNodes;\n  let node;\n\n  moves.forEach(move => {\n  switch(move.type) {\n    case 'INSERT':\n      try {\n        node = move.item.render();\n        domNode.insertBefore(node, childNodes[move.index]);\n      } catch (e) {\n        console.log('A custom-defined node should have a render method, otherwise it must be defined as a function.');\n      }\n      break;\n\n    case 'REMOVE':\n      domNode.removeChild(childNodes[move.index]);\n      break;\n\n    case 'MOVE':\n      domNode.insertBefore(childNodes[move.from], childNodes[move.to]);\n      break;\n    }\n  });\n}","import h from './h/index';\nimport diff from './diff/index';\nimport patch from './patch/index';\nimport VNode from './vnode/index';\n\nexport default {\n  h,\n  diff,\n  patch,\n  VNode\n};"],"names":["isArray","obj","Object","prototype","toString","call","isEmpty","keys","length","eventHookRe","VNode","tagName","props","children","key","count","reduce","acc","child","cleanups","element","test","document","createElement","createElementNS","propName","hasOwnProperty","_events","match","handler","Function","push","evName","addEventListener","e","console","log","_event","setAttribute","forEach","childElement","createTextNode","render","_render","bind","appendChild","$el","removeEventListener","event","classIdSpliter","parseTagName","parts","split","result","part","className","substr","id","join","h","tagInfo","unshift","style","REPLACE","REORDER","PROPS","TEXT","patchType","diff","oldList","newList","oldListKeys","getKeys","newListKeys","oldListLength","newListLength","diffed","slice","moves","noKeys","op","start","end","index","inserted","splice","i","type","item","indexDeltas","Array","fill","newIndex","_physicalIndex","indexOf","oldIndex","from","to","_elem","list","map","oldTree","newTree","patches","walk","oldNode","newNode","currPatches","propPatches","text","diffProps","node","diffChildren","oldProps","newProps","value","oldChildren","newChildren","diffs","listDiff","prevSibling","currIndex","newChild","patch","domRoot","domNode","walker","applyPatches","childNodes","childArr","Error","parentNode","replaceChild","removeAttribute","textContent","nodeValue","reorderChildren","move","insertBefore","removeChild"],"mappings":"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"}